// <auto-generated />
using System;
using Ecommerce.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce.Infra.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230603153420_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Ecommerce.Domain.Entities.AddressEntities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("longtext")
                        .HasColumnName("additional_information");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("building_number");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<string>("Complement")
                        .HasColumnType("longtext")
                        .HasColumnName("complement");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("longtext")
                        .HasColumnName("neighborhood");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("postal_code");

                    b.Property<string>("RecipientFullName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("recipient_full_name");

                    b.Property<string>("RecipientPhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("recipient_phone_number");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("street_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_address_city_id");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.AddressEntities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<int>("StateId")
                        .HasColumnType("int")
                        .HasColumnName("state_id");

                    b.HasKey("Id")
                        .HasName("pk_city");

                    b.HasIndex("StateId")
                        .HasDatabaseName("ix_city_state_id");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.AddressEntities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_country");

                    b.ToTable("country", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "BR",
                            Name = "Brazil"
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.AddressEntities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("code");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_state");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_state_country_id");

                    b.ToTable("state", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AC",
                            CountryId = 1,
                            Name = "Acre"
                        },
                        new
                        {
                            Id = 2,
                            Code = "AL",
                            CountryId = 1,
                            Name = "Alagoas"
                        },
                        new
                        {
                            Id = 3,
                            Code = "AP",
                            CountryId = 1,
                            Name = "Amapá"
                        },
                        new
                        {
                            Id = 4,
                            Code = "AM",
                            CountryId = 1,
                            Name = "Amazonas"
                        },
                        new
                        {
                            Id = 5,
                            Code = "BA",
                            CountryId = 1,
                            Name = "Bahia"
                        },
                        new
                        {
                            Id = 6,
                            Code = "CE",
                            CountryId = 1,
                            Name = "Ceará"
                        },
                        new
                        {
                            Id = 7,
                            Code = "ES",
                            CountryId = 1,
                            Name = "Espírito Santo"
                        },
                        new
                        {
                            Id = 8,
                            Code = "GO",
                            CountryId = 1,
                            Name = "Goiás"
                        },
                        new
                        {
                            Id = 9,
                            Code = "MA",
                            CountryId = 1,
                            Name = "Maranhão"
                        },
                        new
                        {
                            Id = 10,
                            Code = "MT",
                            CountryId = 1,
                            Name = "Mato Grosso"
                        },
                        new
                        {
                            Id = 11,
                            Code = "MS",
                            CountryId = 1,
                            Name = "Mato Grosso do Sul "
                        },
                        new
                        {
                            Id = 12,
                            Code = "MG",
                            CountryId = 1,
                            Name = "Minas Gerais"
                        },
                        new
                        {
                            Id = 13,
                            Code = "PA",
                            CountryId = 1,
                            Name = "Pará"
                        },
                        new
                        {
                            Id = 14,
                            Code = "PB",
                            CountryId = 1,
                            Name = "Paraíba"
                        },
                        new
                        {
                            Id = 15,
                            Code = "PR",
                            CountryId = 1,
                            Name = "Paraná"
                        },
                        new
                        {
                            Id = 16,
                            Code = "PE",
                            CountryId = 1,
                            Name = "Pernambuco"
                        },
                        new
                        {
                            Id = 17,
                            Code = "PI",
                            CountryId = 1,
                            Name = "Piauí"
                        },
                        new
                        {
                            Id = 18,
                            Code = "RJ",
                            CountryId = 1,
                            Name = "Rio de Janeiro"
                        },
                        new
                        {
                            Id = 19,
                            Code = "RN",
                            CountryId = 1,
                            Name = "Rio Grande do Norte"
                        },
                        new
                        {
                            Id = 20,
                            Code = "RS",
                            CountryId = 1,
                            Name = "Rio Grande do Sul "
                        },
                        new
                        {
                            Id = 21,
                            Code = "RO",
                            CountryId = 1,
                            Name = "Rondônia"
                        },
                        new
                        {
                            Id = 22,
                            Code = "RR",
                            CountryId = 1,
                            Name = "Roraima"
                        },
                        new
                        {
                            Id = 23,
                            Code = "SC",
                            CountryId = 1,
                            Name = "Santa Catarina "
                        },
                        new
                        {
                            Id = 24,
                            Code = "SP",
                            CountryId = 1,
                            Name = "São Paulo"
                        },
                        new
                        {
                            Id = 25,
                            Code = "SE",
                            CountryId = 1,
                            Name = "Sergipe"
                        },
                        new
                        {
                            Id = 26,
                            Code = "TO",
                            CountryId = 1,
                            Name = "Tocantins"
                        },
                        new
                        {
                            Id = 27,
                            Code = "DF",
                            CountryId = 1,
                            Name = "Distrito Federal "
                        });
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<float>("Height")
                        .HasColumnType("float")
                        .HasColumnName("height");

                    b.Property<float>("Length")
                        .HasColumnType("float")
                        .HasColumnName("length");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("product_category_id");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("sku");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<bool>("Visible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("visible");

                    b.Property<float>("Weight")
                        .HasColumnType("float")
                        .HasColumnName("weight");

                    b.Property<float>("Width")
                        .HasColumnType("float")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_product");

                    b.HasIndex("ProductCategoryId")
                        .HasDatabaseName("ix_product_product_category_id");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid>("Guid")
                        .HasColumnType("char(36)")
                        .HasColumnName("guid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_product_category");

                    b.ToTable("product_category", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("image_path");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("pk_product_image");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_image_product_id");

                    b.ToTable("product_image", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.ProductInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("product_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_product_inventory");

                    b.HasIndex("ProductId")
                        .IsUnique()
                        .HasDatabaseName("ix_product_inventory_product_id");

                    b.ToTable("product_inventory", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.AddressEntities.Address", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.AddressEntities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_address_cities_city_id");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.AddressEntities.City", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.AddressEntities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_city_states_state_id");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.AddressEntities.State", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.AddressEntities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_state_country_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.Product", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.ProductEntities.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_product_categories_product_category_id");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.ProductImage", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.ProductEntities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_image_product_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.ProductInventory", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.ProductEntities.Product", "Product")
                        .WithOne("ProductInventory")
                        .HasForeignKey("Ecommerce.Domain.Entities.ProductEntities.ProductInventory", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_inventory_product_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.AddressEntities.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.AddressEntities.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.AddressEntities.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("ProductInventory");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.ProductCategory", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
