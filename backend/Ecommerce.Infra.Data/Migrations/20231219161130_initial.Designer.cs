// <auto-generated />
using System;
using Ecommerce.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerce.Infra.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231219161130_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Ecommerce.Domain.Entities.Address", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("longtext")
                        .HasColumnName("additional_information");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("building_number");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("city");

                    b.Property<string>("Complement")
                        .HasColumnType("longtext")
                        .HasColumnName("complement");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("longtext")
                        .HasColumnName("neighborhood");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("postal_code");

                    b.Property<string>("RecipientFullName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("recipient_full_name");

                    b.Property<string>("RecipientPhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("recipient_phone_number");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("state");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("street_name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_address");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.CartEntities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_cart");

                    b.ToTable("cart", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.CartEntities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasColumnName("cart_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsSelectedForCheckout")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_selected_for_checkout");

                    b.Property<Guid>("ProductCombinationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("product_combination_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_cart_item");

                    b.HasIndex("CartId")
                        .HasDatabaseName("ix_cart_item_cart_id");

                    b.HasIndex("ProductCombinationId")
                        .HasDatabaseName("ix_cart_item_product_combination_id");

                    b.ToTable("cart_item", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("product_category_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<bool>("Visible")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("visible");

                    b.HasKey("Id")
                        .HasName("pk_product");

                    b.HasIndex("ProductCategoryId")
                        .HasDatabaseName("ix_product_product_category_id");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.ProductCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_product_category");

                    b.ToTable("product_category", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.ProductCombination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("CombinationString")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("combination_string");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<float>("Height")
                        .HasColumnType("float")
                        .HasColumnName("height");

                    b.Property<float>("Length")
                        .HasColumnType("float")
                        .HasColumnName("length");

                    b.Property<decimal>("Price")
                        .HasPrecision(65, 2)
                        .HasColumnType("decimal(65,2)")
                        .HasColumnName("price");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)")
                        .HasColumnName("product_id");

                    b.Property<string>("Sku")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("sku");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<float>("Weight")
                        .HasColumnType("float")
                        .HasColumnName("weight");

                    b.Property<float>("Width")
                        .HasColumnType("float")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_product_combination");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_combination_product_id");

                    b.ToTable("product_combination", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.ProductDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int>("DiscountUnit")
                        .HasColumnType("int")
                        .HasColumnName("discount_unit");

                    b.Property<decimal>("DiscountValue")
                        .HasPrecision(65, 2)
                        .HasColumnType("decimal(65,2)")
                        .HasColumnName("discount_value");

                    b.Property<decimal?>("MaximumDiscountAmount")
                        .HasPrecision(65, 2)
                        .HasColumnType("decimal(65,2)")
                        .HasColumnName("maximum_discount_amount");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)")
                        .HasColumnName("product_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("valid_from");

                    b.Property<DateTime?>("ValidUntil")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("valid_until");

                    b.HasKey("Id")
                        .HasName("pk_product_discount");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_discount_product_id");

                    b.ToTable("product_discount", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("image_path");

                    b.Property<Guid>("ProductCombinationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("product_combination_id");

                    b.HasKey("Id")
                        .HasName("pk_product_image");

                    b.HasIndex("ProductCombinationId")
                        .HasDatabaseName("ix_product_image_product_combination_id");

                    b.ToTable("product_image", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.ProductInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProductCombinationId")
                        .HasColumnType("char(36)")
                        .HasColumnName("product_combination_id");

                    b.Property<int>("Stock")
                        .HasColumnType("int")
                        .HasColumnName("stock");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_product_inventory");

                    b.HasIndex("ProductCombinationId")
                        .IsUnique()
                        .HasDatabaseName("ix_product_inventory_product_combination_id");

                    b.ToTable("product_inventory", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.ProductReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)")
                        .HasColumnName("product_id");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_product_review");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_review_product_id");

                    b.ToTable("product_review", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.VariantEntities.ProductCategoryVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<Guid>("ProductCategoryId")
                        .HasColumnType("char(36)")
                        .HasColumnName("product_category_id");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("variant_id");

                    b.HasKey("Id")
                        .HasName("pk_product_category_variant");

                    b.HasIndex("ProductCategoryId")
                        .HasDatabaseName("ix_product_category_variant_product_category_id");

                    b.HasIndex("VariantId")
                        .HasDatabaseName("ix_product_category_variant_variant_id");

                    b.ToTable("product_category_variant", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.VariantEntities.ProductVariantOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("char(36)")
                        .HasColumnName("product_id");

                    b.Property<int>("VariantOptionId")
                        .HasColumnType("int")
                        .HasColumnName("variant_option_id");

                    b.HasKey("Id")
                        .HasName("pk_product_variant_option");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_product_variant_option_product_id");

                    b.HasIndex("VariantOptionId")
                        .HasDatabaseName("ix_product_variant_option_variant_option_id");

                    b.ToTable("product_variant_option", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.VariantEntities.Variant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_variant");

                    b.ToTable("variant", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.VariantEntities.VariantOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<Guid>("VariantId")
                        .HasColumnType("char(36)")
                        .HasColumnName("variant_id");

                    b.HasKey("Id")
                        .HasName("pk_variant_option");

                    b.HasIndex("VariantId")
                        .HasDatabaseName("ix_variant_option_variant_id");

                    b.ToTable("variant_option", (string)null);
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.CartEntities.CartItem", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.CartEntities.Cart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_item_cart_cart_id");

                    b.HasOne("Ecommerce.Domain.Entities.ProductEntities.ProductCombination", "ProductCombination")
                        .WithMany()
                        .HasForeignKey("ProductCombinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cart_item_product_combinations_product_combination_id");

                    b.Navigation("ProductCombination");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.Product", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.ProductEntities.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_product_categories_product_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.ProductCombination", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.ProductEntities.Product", "Product")
                        .WithMany("Combinations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_combination_product_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.ProductDiscount", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.ProductEntities.Product", "Product")
                        .WithMany("Discounts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_discount_product_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.ProductImage", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.ProductEntities.ProductCombination", "ProductCombination")
                        .WithMany("Images")
                        .HasForeignKey("ProductCombinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_image_product_combination_product_combination_id");

                    b.Navigation("ProductCombination");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.ProductInventory", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.ProductEntities.ProductCombination", "ProductCombination")
                        .WithOne("Inventory")
                        .HasForeignKey("Ecommerce.Domain.Entities.ProductEntities.ProductInventory", "ProductCombinationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_inventory_product_combination_product_combination_id");

                    b.Navigation("ProductCombination");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.ProductReview", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.ProductEntities.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_review_product_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.VariantEntities.ProductCategoryVariant", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.ProductEntities.ProductCategory", "ProductCategory")
                        .WithMany("Variants")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_category_variant_product_category_product_category_id");

                    b.HasOne("Ecommerce.Domain.Entities.VariantEntities.Variant", "Variant")
                        .WithMany("ProductCategoryVariants")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_category_variant_variants_variant_id");

                    b.Navigation("ProductCategory");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.VariantEntities.ProductVariantOption", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.ProductEntities.Product", "Product")
                        .WithMany("VariantOptions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_variant_option_product_product_id");

                    b.HasOne("Ecommerce.Domain.Entities.VariantEntities.VariantOption", "VariantOption")
                        .WithMany("ProductVariantOptions")
                        .HasForeignKey("VariantOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_product_variant_option_variant_options_variant_option_id");

                    b.Navigation("Product");

                    b.Navigation("VariantOption");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.VariantEntities.VariantOption", b =>
                {
                    b.HasOne("Ecommerce.Domain.Entities.VariantEntities.Variant", "Variant")
                        .WithMany("Options")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_variant_option_variant_variant_id");

                    b.Navigation("Variant");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.CartEntities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.Product", b =>
                {
                    b.Navigation("Combinations");

                    b.Navigation("Discounts");

                    b.Navigation("Reviews");

                    b.Navigation("VariantOptions");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.ProductCategory", b =>
                {
                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.ProductEntities.ProductCombination", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Inventory")
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.VariantEntities.Variant", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("ProductCategoryVariants");
                });

            modelBuilder.Entity("Ecommerce.Domain.Entities.VariantEntities.VariantOption", b =>
                {
                    b.Navigation("ProductVariantOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
